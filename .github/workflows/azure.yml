name: Build and Deploy to Azure

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}

    steps:
      # Paso 1: Clonar el repositorio
      - uses: actions/checkout@v4

      # Paso 2: Configurar JDK y Maven
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'

      # Paso 3: Construir los proyectos
      - name: Build project e-commerce with Maven
        run: mvn clean package -DskipTests
        
      # Paso 4: Ejecutar pruebas unitarias para ProductCatalog
      - name: Run Tests for project e-commerce
        run: mvn test

      # Paso 4: Iniciar sesión en Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Paso 5: Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Paso 6: Construir y etiquetar las imágenes Docker usando Docker Compose
      - name: Build Docker Images with Docker Compose
        run: |
          docker-compose -f docker-compose.yml build
          docker tag e-commerce:latest ${{ secrets.ACR_LOGIN_SERVER }}/e-commerce:latest

      # Paso 7: Subir las imágenes a ACR
      - name: Push Docker Images to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/e-commerce:latest